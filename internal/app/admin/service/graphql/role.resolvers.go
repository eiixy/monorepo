package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"

	"github.com/eiixy/monorepo/internal/data/admin/ent"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	return r.client.User.Create().SetInput(input).Save(ctx)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input ent.UpdateUserInput) (*ent.User, error) {
	return r.client.User.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, input ent.CreateRoleInput) (*ent.Role, error) {
	return r.client.Role.Create().SetInput(input).Save(ctx)
}

// UpdateRole is the resolver for the updateRole field.
func (r *mutationResolver) UpdateRole(ctx context.Context, id int, input ent.UpdateRoleInput) (*ent.Role, error) {
	return r.client.Role.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteRole is the resolver for the deleteRole field.
func (r *mutationResolver) DeleteRole(ctx context.Context, id int) (bool, error) {
	err := r.client.Role.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreateMenu is the resolver for the createMenu field.
func (r *mutationResolver) CreateMenu(ctx context.Context, input ent.CreateMenuInput) (*ent.Menu, error) {
	return r.client.Menu.Create().SetInput(input).Save(ctx)
}

// UpdateMenu is the resolver for the updateMenu field.
func (r *mutationResolver) UpdateMenu(ctx context.Context, id int, input ent.UpdateMenuInput) (*ent.Menu, error) {
	return r.client.Menu.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteMenu is the resolver for the deleteMenu field.
func (r *mutationResolver) DeleteMenu(ctx context.Context, id int) (bool, error) {
	err := r.client.Menu.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}

// CreatePermission is the resolver for the createPermission field.
func (r *mutationResolver) CreatePermission(ctx context.Context, input ent.CreatePermissionInput) (*ent.Permission, error) {
	return r.client.Permission.Create().SetInput(input).Save(ctx)
}

// UpdatePermission is the resolver for the updatePermission field.
func (r *mutationResolver) UpdatePermission(ctx context.Context, id int, input ent.UpdatePermissionInput) (*ent.Permission, error) {
	return r.client.Permission.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeletePermission is the resolver for the deletePermission field.
func (r *mutationResolver) DeletePermission(ctx context.Context, id int) (bool, error) {
	err := r.client.Permission.DeleteOneID(id).Exec(ctx)
	if err != nil {
		return false, err
	}
	return true, nil
}
