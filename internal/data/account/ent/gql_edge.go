// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (m *Menu) Roles(ctx context.Context) (result []*Role, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.RolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryRoles().All(ctx)
	}
	return result, err
}

func (ol *OperationLog) User(ctx context.Context) (*User, error) {
	result, err := ol.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = ol.QueryUser().Only(ctx)
	}
	return result, err
}

func (pe *Permission) Roles(ctx context.Context) (result []*Role, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pe.NamedRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pe.Edges.RolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pe.QueryRoles().All(ctx)
	}
	return result, err
}

func (r *Role) Menus(ctx context.Context) (result []*Menu, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedMenus(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.MenusOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryMenus().All(ctx)
	}
	return result, err
}

func (r *Role) Permissions(ctx context.Context) (result []*Permission, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedPermissions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.PermissionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryPermissions().All(ctx)
	}
	return result, err
}

func (r *Role) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = r.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = r.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = r.QueryUsers().All(ctx)
	}
	return result, err
}

func (u *User) Roles(ctx context.Context) (result []*Role, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedRoles(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.RolesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryRoles().All(ctx)
	}
	return result, err
}

func (u *User) OperationLogs(ctx context.Context) (result []*OperationLog, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedOperationLogs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.OperationLogsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryOperationLogs().All(ctx)
	}
	return result, err
}
