// Code generated by ent, DO NOT EDIT.

package ent

// CreateMenuInput represents a mutation input for creating menus.
type CreateMenuInput struct {
	Name     string
	Path     string
	RoleIDs  []int
	ParentID *int
	ChildIDs []int
}

// Mutate applies the CreateMenuInput on the MenuMutation builder.
func (i *CreateMenuInput) Mutate(m *MenuMutation) {
	m.SetName(i.Name)
	m.SetPath(i.Path)
	if v := i.RoleIDs; len(v) > 0 {
		m.AddRoleIDs(v...)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if v := i.ChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
}

// SetInput applies the change-set in the CreateMenuInput on the MenuCreate builder.
func (c *MenuCreate) SetInput(i CreateMenuInput) *MenuCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMenuInput represents a mutation input for updating menus.
type UpdateMenuInput struct {
	Name           *string
	Path           *string
	ClearRoles     bool
	AddRoleIDs     []int
	RemoveRoleIDs  []int
	ClearParent    bool
	ParentID       *int
	ClearChildren  bool
	AddChildIDs    []int
	RemoveChildIDs []int
}

// Mutate applies the UpdateMenuInput on the MenuMutation builder.
func (i *UpdateMenuInput) Mutate(m *MenuMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Path; v != nil {
		m.SetPath(*v)
	}
	if i.ClearRoles {
		m.ClearRoles()
	}
	if v := i.AddRoleIDs; len(v) > 0 {
		m.AddRoleIDs(v...)
	}
	if v := i.RemoveRoleIDs; len(v) > 0 {
		m.RemoveRoleIDs(v...)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if i.ClearChildren {
		m.ClearChildren()
	}
	if v := i.AddChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
	if v := i.RemoveChildIDs; len(v) > 0 {
		m.RemoveChildIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateMenuInput on the MenuUpdate builder.
func (c *MenuUpdate) SetInput(i UpdateMenuInput) *MenuUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMenuInput on the MenuUpdateOne builder.
func (c *MenuUpdateOne) SetInput(i UpdateMenuInput) *MenuUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOperationLogInput represents a mutation input for creating operationlogs.
type CreateOperationLogInput struct {
	Type    string
	Context map[string]interface{}
	UserID  int
}

// Mutate applies the CreateOperationLogInput on the OperationLogMutation builder.
func (i *CreateOperationLogInput) Mutate(m *OperationLogMutation) {
	m.SetType(i.Type)
	if v := i.Context; v != nil {
		m.SetContext(v)
	}
	m.SetUserID(i.UserID)
}

// SetInput applies the change-set in the CreateOperationLogInput on the OperationLogCreate builder.
func (c *OperationLogCreate) SetInput(i CreateOperationLogInput) *OperationLogCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOperationLogInput represents a mutation input for updating operationlogs.
type UpdateOperationLogInput struct {
	Type    *string
	Context map[string]interface{}
	UserID  *int
}

// Mutate applies the UpdateOperationLogInput on the OperationLogMutation builder.
func (i *UpdateOperationLogInput) Mutate(m *OperationLogMutation) {
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.Context; v != nil {
		m.SetContext(v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateOperationLogInput on the OperationLogUpdate builder.
func (c *OperationLogUpdate) SetInput(i UpdateOperationLogInput) *OperationLogUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOperationLogInput on the OperationLogUpdateOne builder.
func (c *OperationLogUpdateOne) SetInput(i UpdateOperationLogInput) *OperationLogUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePermissionInput represents a mutation input for creating permissions.
type CreatePermissionInput struct {
	Key      string
	Name     string
	Desc     *string
	RoleIDs  []int
	ParentID *int
	ChildIDs []int
}

// Mutate applies the CreatePermissionInput on the PermissionMutation builder.
func (i *CreatePermissionInput) Mutate(m *PermissionMutation) {
	m.SetKey(i.Key)
	m.SetName(i.Name)
	if v := i.Desc; v != nil {
		m.SetDesc(*v)
	}
	if v := i.RoleIDs; len(v) > 0 {
		m.AddRoleIDs(v...)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if v := i.ChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePermissionInput on the PermissionCreate builder.
func (c *PermissionCreate) SetInput(i CreatePermissionInput) *PermissionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePermissionInput represents a mutation input for updating permissions.
type UpdatePermissionInput struct {
	Key            *string
	Name           *string
	ClearDesc      bool
	Desc           *string
	ClearRoles     bool
	AddRoleIDs     []int
	RemoveRoleIDs  []int
	ClearParent    bool
	ParentID       *int
	ClearChildren  bool
	AddChildIDs    []int
	RemoveChildIDs []int
}

// Mutate applies the UpdatePermissionInput on the PermissionMutation builder.
func (i *UpdatePermissionInput) Mutate(m *PermissionMutation) {
	if v := i.Key; v != nil {
		m.SetKey(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDesc {
		m.ClearDesc()
	}
	if v := i.Desc; v != nil {
		m.SetDesc(*v)
	}
	if i.ClearRoles {
		m.ClearRoles()
	}
	if v := i.AddRoleIDs; len(v) > 0 {
		m.AddRoleIDs(v...)
	}
	if v := i.RemoveRoleIDs; len(v) > 0 {
		m.RemoveRoleIDs(v...)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if i.ClearChildren {
		m.ClearChildren()
	}
	if v := i.AddChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
	if v := i.RemoveChildIDs; len(v) > 0 {
		m.RemoveChildIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePermissionInput on the PermissionUpdate builder.
func (c *PermissionUpdate) SetInput(i UpdatePermissionInput) *PermissionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePermissionInput on the PermissionUpdateOne builder.
func (c *PermissionUpdateOne) SetInput(i UpdatePermissionInput) *PermissionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRoleInput represents a mutation input for creating roles.
type CreateRoleInput struct {
	Name          string
	MenuIDs       []int
	PermissionIDs []int
	UserIDs       []int
}

// Mutate applies the CreateRoleInput on the RoleMutation builder.
func (i *CreateRoleInput) Mutate(m *RoleMutation) {
	m.SetName(i.Name)
	if v := i.MenuIDs; len(v) > 0 {
		m.AddMenuIDs(v...)
	}
	if v := i.PermissionIDs; len(v) > 0 {
		m.AddPermissionIDs(v...)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
}

// SetInput applies the change-set in the CreateRoleInput on the RoleCreate builder.
func (c *RoleCreate) SetInput(i CreateRoleInput) *RoleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRoleInput represents a mutation input for updating roles.
type UpdateRoleInput struct {
	Name                *string
	ClearMenus          bool
	AddMenuIDs          []int
	RemoveMenuIDs       []int
	ClearPermissions    bool
	AddPermissionIDs    []int
	RemovePermissionIDs []int
	ClearUsers          bool
	AddUserIDs          []int
	RemoveUserIDs       []int
}

// Mutate applies the UpdateRoleInput on the RoleMutation builder.
func (i *UpdateRoleInput) Mutate(m *RoleMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearMenus {
		m.ClearMenus()
	}
	if v := i.AddMenuIDs; len(v) > 0 {
		m.AddMenuIDs(v...)
	}
	if v := i.RemoveMenuIDs; len(v) > 0 {
		m.RemoveMenuIDs(v...)
	}
	if i.ClearPermissions {
		m.ClearPermissions()
	}
	if v := i.AddPermissionIDs; len(v) > 0 {
		m.AddPermissionIDs(v...)
	}
	if v := i.RemovePermissionIDs; len(v) > 0 {
		m.RemovePermissionIDs(v...)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateRoleInput on the RoleUpdate builder.
func (c *RoleUpdate) SetInput(i UpdateRoleInput) *RoleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRoleInput on the RoleUpdateOne builder.
func (c *RoleUpdateOne) SetInput(i UpdateRoleInput) *RoleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
