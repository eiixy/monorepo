// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/eiixy/monorepo/internal/data/admin/ent/operationlog"
	"github.com/eiixy/monorepo/internal/data/admin/ent/permission"
	"github.com/eiixy/monorepo/internal/data/admin/ent/predicate"
	"github.com/eiixy/monorepo/internal/data/admin/ent/role"
	"github.com/eiixy/monorepo/internal/data/admin/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 4)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   operationlog.Table,
			Columns: operationlog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: operationlog.FieldID,
			},
		},
		Type: "OperationLog",
		Fields: map[string]*sqlgraph.FieldSpec{
			operationlog.FieldCreatedAt: {Type: field.TypeTime, Column: operationlog.FieldCreatedAt},
			operationlog.FieldUpdatedAt: {Type: field.TypeTime, Column: operationlog.FieldUpdatedAt},
			operationlog.FieldUserID:    {Type: field.TypeInt, Column: operationlog.FieldUserID},
			operationlog.FieldType:      {Type: field.TypeString, Column: operationlog.FieldType},
			operationlog.FieldContext:   {Type: field.TypeJSON, Column: operationlog.FieldContext},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   permission.Table,
			Columns: permission.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: permission.FieldID,
			},
		},
		Type: "Permission",
		Fields: map[string]*sqlgraph.FieldSpec{
			permission.FieldCreatedAt: {Type: field.TypeTime, Column: permission.FieldCreatedAt},
			permission.FieldUpdatedAt: {Type: field.TypeTime, Column: permission.FieldUpdatedAt},
			permission.FieldParentID:  {Type: field.TypeInt64, Column: permission.FieldParentID},
			permission.FieldName:      {Type: field.TypeString, Column: permission.FieldName},
			permission.FieldKey:       {Type: field.TypeString, Column: permission.FieldKey},
			permission.FieldType:      {Type: field.TypeEnum, Column: permission.FieldType},
			permission.FieldPath:      {Type: field.TypeString, Column: permission.FieldPath},
			permission.FieldDesc:      {Type: field.TypeString, Column: permission.FieldDesc},
			permission.FieldSort:      {Type: field.TypeInt, Column: permission.FieldSort},
			permission.FieldAttrs:     {Type: field.TypeJSON, Column: permission.FieldAttrs},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   role.Table,
			Columns: role.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: role.FieldID,
			},
		},
		Type: "Role",
		Fields: map[string]*sqlgraph.FieldSpec{
			role.FieldCreatedAt: {Type: field.TypeTime, Column: role.FieldCreatedAt},
			role.FieldUpdatedAt: {Type: field.TypeTime, Column: role.FieldUpdatedAt},
			role.FieldName:      {Type: field.TypeString, Column: role.FieldName},
			role.FieldSort:      {Type: field.TypeInt, Column: role.FieldSort},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt: {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt: {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldDeletedAt: {Type: field.TypeTime, Column: user.FieldDeletedAt},
			user.FieldEmail:     {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldNickname:  {Type: field.TypeString, Column: user.FieldNickname},
			user.FieldAvatar:    {Type: field.TypeString, Column: user.FieldAvatar},
			user.FieldPassword:  {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldStatus:    {Type: field.TypeEnum, Column: user.FieldStatus},
			user.FieldIsAdmin:   {Type: field.TypeBool, Column: user.FieldIsAdmin},
		},
	}
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   operationlog.UserTable,
			Columns: []string{operationlog.UserColumn},
			Bidi:    false,
		},
		"OperationLog",
		"User",
	)
	graph.MustAddE(
		"roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   permission.RolesTable,
			Columns: permission.RolesPrimaryKey,
			Bidi:    false,
		},
		"Permission",
		"Role",
	)
	graph.MustAddE(
		"permissions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   role.PermissionsTable,
			Columns: role.PermissionsPrimaryKey,
			Bidi:    false,
		},
		"Role",
		"Permission",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   role.UsersTable,
			Columns: role.UsersPrimaryKey,
			Bidi:    false,
		},
		"Role",
		"User",
	)
	graph.MustAddE(
		"roles",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.RolesTable,
			Columns: user.RolesPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Role",
	)
	graph.MustAddE(
		"operation_logs",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OperationLogsTable,
			Columns: []string{user.OperationLogsColumn},
			Bidi:    false,
		},
		"User",
		"OperationLog",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (olq *OperationLogQuery) addPredicate(pred func(s *sql.Selector)) {
	olq.predicates = append(olq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OperationLogQuery builder.
func (olq *OperationLogQuery) Filter() *OperationLogFilter {
	return &OperationLogFilter{config: olq.config, predicateAdder: olq}
}

// addPredicate implements the predicateAdder interface.
func (m *OperationLogMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OperationLogMutation builder.
func (m *OperationLogMutation) Filter() *OperationLogFilter {
	return &OperationLogFilter{config: m.config, predicateAdder: m}
}

// OperationLogFilter provides a generic filtering capability at runtime for OperationLogQuery.
type OperationLogFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OperationLogFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *OperationLogFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(operationlog.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OperationLogFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(operationlog.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OperationLogFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(operationlog.FieldUpdatedAt))
}

// WhereUserID applies the entql int predicate on the user_id field.
func (f *OperationLogFilter) WhereUserID(p entql.IntP) {
	f.Where(p.Field(operationlog.FieldUserID))
}

// WhereType applies the entql string predicate on the type field.
func (f *OperationLogFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(operationlog.FieldType))
}

// WhereContext applies the entql json.RawMessage predicate on the context field.
func (f *OperationLogFilter) WhereContext(p entql.BytesP) {
	f.Where(p.Field(operationlog.FieldContext))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OperationLogFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OperationLogFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (pq *PermissionQuery) addPredicate(pred func(s *sql.Selector)) {
	pq.predicates = append(pq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PermissionQuery builder.
func (pq *PermissionQuery) Filter() *PermissionFilter {
	return &PermissionFilter{config: pq.config, predicateAdder: pq}
}

// addPredicate implements the predicateAdder interface.
func (m *PermissionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PermissionMutation builder.
func (m *PermissionMutation) Filter() *PermissionFilter {
	return &PermissionFilter{config: m.config, predicateAdder: m}
}

// PermissionFilter provides a generic filtering capability at runtime for PermissionQuery.
type PermissionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PermissionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *PermissionFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(permission.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PermissionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(permission.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PermissionFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(permission.FieldUpdatedAt))
}

// WhereParentID applies the entql int64 predicate on the parent_id field.
func (f *PermissionFilter) WhereParentID(p entql.Int64P) {
	f.Where(p.Field(permission.FieldParentID))
}

// WhereName applies the entql string predicate on the name field.
func (f *PermissionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(permission.FieldName))
}

// WhereKey applies the entql string predicate on the key field.
func (f *PermissionFilter) WhereKey(p entql.StringP) {
	f.Where(p.Field(permission.FieldKey))
}

// WhereType applies the entql string predicate on the type field.
func (f *PermissionFilter) WhereType(p entql.StringP) {
	f.Where(p.Field(permission.FieldType))
}

// WherePath applies the entql string predicate on the path field.
func (f *PermissionFilter) WherePath(p entql.StringP) {
	f.Where(p.Field(permission.FieldPath))
}

// WhereDesc applies the entql string predicate on the desc field.
func (f *PermissionFilter) WhereDesc(p entql.StringP) {
	f.Where(p.Field(permission.FieldDesc))
}

// WhereSort applies the entql int predicate on the sort field.
func (f *PermissionFilter) WhereSort(p entql.IntP) {
	f.Where(p.Field(permission.FieldSort))
}

// WhereAttrs applies the entql json.RawMessage predicate on the attrs field.
func (f *PermissionFilter) WhereAttrs(p entql.BytesP) {
	f.Where(p.Field(permission.FieldAttrs))
}

// WhereHasRoles applies a predicate to check if query has an edge roles.
func (f *PermissionFilter) WhereHasRoles() {
	f.Where(entql.HasEdge("roles"))
}

// WhereHasRolesWith applies a predicate to check if query has an edge roles with a given conditions (other predicates).
func (f *PermissionFilter) WhereHasRolesWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (rq *RoleQuery) addPredicate(pred func(s *sql.Selector)) {
	rq.predicates = append(rq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the RoleQuery builder.
func (rq *RoleQuery) Filter() *RoleFilter {
	return &RoleFilter{config: rq.config, predicateAdder: rq}
}

// addPredicate implements the predicateAdder interface.
func (m *RoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the RoleMutation builder.
func (m *RoleMutation) Filter() *RoleFilter {
	return &RoleFilter{config: m.config, predicateAdder: m}
}

// RoleFilter provides a generic filtering capability at runtime for RoleQuery.
type RoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *RoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *RoleFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(role.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *RoleFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *RoleFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(role.FieldUpdatedAt))
}

// WhereName applies the entql string predicate on the name field.
func (f *RoleFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(role.FieldName))
}

// WhereSort applies the entql int predicate on the sort field.
func (f *RoleFilter) WhereSort(p entql.IntP) {
	f.Where(p.Field(role.FieldSort))
}

// WhereHasPermissions applies a predicate to check if query has an edge permissions.
func (f *RoleFilter) WhereHasPermissions() {
	f.Where(entql.HasEdge("permissions"))
}

// WhereHasPermissionsWith applies a predicate to check if query has an edge permissions with a given conditions (other predicates).
func (f *RoleFilter) WhereHasPermissionsWith(preds ...predicate.Permission) {
	f.Where(entql.HasEdgeWith("permissions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *RoleFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *RoleFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *UserFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldDeletedAt))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereNickname applies the entql string predicate on the nickname field.
func (f *UserFilter) WhereNickname(p entql.StringP) {
	f.Where(p.Field(user.FieldNickname))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *UserFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatar))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(user.FieldStatus))
}

// WhereIsAdmin applies the entql bool predicate on the is_admin field.
func (f *UserFilter) WhereIsAdmin(p entql.BoolP) {
	f.Where(p.Field(user.FieldIsAdmin))
}

// WhereHasRoles applies a predicate to check if query has an edge roles.
func (f *UserFilter) WhereHasRoles() {
	f.Where(entql.HasEdge("roles"))
}

// WhereHasRolesWith applies a predicate to check if query has an edge roles with a given conditions (other predicates).
func (f *UserFilter) WhereHasRolesWith(preds ...predicate.Role) {
	f.Where(entql.HasEdgeWith("roles", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOperationLogs applies a predicate to check if query has an edge operation_logs.
func (f *UserFilter) WhereHasOperationLogs() {
	f.Where(entql.HasEdge("operation_logs"))
}

// WhereHasOperationLogsWith applies a predicate to check if query has an edge operation_logs with a given conditions (other predicates).
func (f *UserFilter) WhereHasOperationLogsWith(preds ...predicate.OperationLog) {
	f.Where(entql.HasEdgeWith("operation_logs", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
